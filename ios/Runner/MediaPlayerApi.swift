// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct MediaFile {
  var fileName: String

  static func fromList(_ list: [Any?]) -> MediaFile? {
    let fileName = list[0] as! String

    return MediaFile(
      fileName: fileName
    )
  }
  func toList() -> [Any?] {
    return [
      fileName,
    ]
  }
}
private class MediaPlayerApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return MediaFile.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class MediaPlayerApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? MediaFile {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MediaPlayerApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MediaPlayerApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MediaPlayerApiCodecWriter(data: data)
  }
}

class MediaPlayerApiCodec: FlutterStandardMessageCodec {
  static let shared = MediaPlayerApiCodec(readerWriter: MediaPlayerApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MediaPlayerApi {
  func play(file: MediaFile) throws -> Bool
  func stop() throws
  func loop(looping: Bool) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MediaPlayerApiSetup {
  /// The codec used by MediaPlayerApi.
  static var codec: FlutterStandardMessageCodec { MediaPlayerApiCodec.shared }
  /// Sets up an instance of `MediaPlayerApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MediaPlayerApi?) {
    let playChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.purr_generator.MediaPlayerApi.play", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      playChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let fileArg = args[0] as! MediaFile
        do {
          let result = try api.play(file: fileArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      playChannel.setMessageHandler(nil)
    }
    let stopChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.purr_generator.MediaPlayerApi.stop", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopChannel.setMessageHandler { _, reply in
        do {
          try api.stop()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopChannel.setMessageHandler(nil)
    }
    let loopChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.purr_generator.MediaPlayerApi.loop", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      loopChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let loopingArg = args[0] as! Bool
        do {
          try api.loop(looping: loopingArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      loopChannel.setMessageHandler(nil)
    }
  }
}
/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class MediaPlayerProgressApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  func onProgress(progress progressArg: Double, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.purr_generator.MediaPlayerProgressApi.onProgress", binaryMessenger: binaryMessenger)
    channel.sendMessage([progressArg] as [Any?]) { _ in
      completion()
    }
  }
  func complete(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.purr_generator.MediaPlayerProgressApi.complete", binaryMessenger: binaryMessenger)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
}
